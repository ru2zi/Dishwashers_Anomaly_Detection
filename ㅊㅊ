from tensorflow.keras.callbacks import Callback

class ProgressCallback(Callback):
    def __init__(self, progress_bar, total_epochs):
        super().__init__()
        self.progress_bar = progress_bar
        self.total_epochs = total_epochs
        self.current_epoch = 0

    def on_epoch_end(self, epoch, logs=None):
        self.current_epoch += 1
        progress_increment = 1.0 / self.total_epochs
        new_progress = self.progress_bar.progress() + progress_increment
        self.progress_bar.progress(new_progress)


def preprocess_and_train_for_category(dataset, category, window_size, epochs, weight, weighting_func, section_threshold=None, peak_threshold=None, progress_bar=None, total_epochs=None):
    # ... [rest of your existing preprocessing code]

    lstm_model = create_lstm_model(window_size)

    # Create the custom callback and pass it to the model's fit function
    if progress_bar and total_epochs:
        progress_callback = ProgressCallback(progress_bar, total_epochs)
        lstm_model.fit(X, y, epochs=epochs, batch_size=64, callbacks=[progress_callback])
    else:
        lstm_model.fit(X, y, epochs=epochs, batch_size=64)

    # ... [rest of your existing code]

    return lstm_model, model_dif


if st.button("Train LSTM Models for EU & US"):
    ...
    # Existing code

    # Pass the progress bar and total epochs to preprocess_and_train:
    lstm_model, model_dif = preprocess_and_train(category_dataset, category, window_size, epochs, category_weight, st.session_state["weighting_func"], category_section_threshold, category_peak_threshold, progress_bar, 2 * epochs)




if st.button("Train LSTM Models for EU & US"):
    progress_bar = st.progress(0)

    total_categories = 2  # EU & US
    total_epochs = total_categories * epochs  # Total number of epochs for both categories combined

    for index, category in enumerate(['EU', 'US']):
        category_dataset = dataset[dataset['Category'] == category]
        category_weight = st.session_state[f"{category}_weight"]

        # Apply selected weighting function to the data before preprocessing and training
        if st.session_state["weighting_func"] == "weighted_peak":
            category_peak_threshold = st.session_state.get(f"{category}_peak_threshold", None)
            if category_peak_threshold:
                weighted_data = weighted_peak(category_dataset['VALUE'].values, category_peak_threshold, category_weight)
                category_dataset['VALUE'] = weighted_data
                lstm_model, model_dif = preprocess_and_train(category_dataset, category, window_size, epochs, category_weight, st.session_state["weighting_func"], category_peak_threshold, None, progress_bar, total_epochs)
        else:  # weighted_anomaly_peak
            category_section_threshold = st.session_state.get(f"{category}_section_threshold", None)
            if category_section_threshold:
                weighted_data = weighted_section(category_dataset['VALUE'].values, category_section_threshold, category_weight)
                category_dataset['VALUE'] = weighted_data
                lstm_model, model_dif = preprocess_and_train(category_dataset, category, window_size, epochs, category_weight, st.session_state["weighting_func"], None, category_section_threshold, progress_bar, total_epochs)

        st.session_state[f"{category}_lstm_model"] = lstm_model
        st.session_state[f"{category}_model_dif"] = model_dif

    st.write("LSTM models trained for both EU and US!")
